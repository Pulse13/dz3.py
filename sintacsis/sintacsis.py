
value = None
value = 1234
print(type(value))

s = 'hello \nworld' #как в шарпе табуляция и вывод на новую строку (\t табуляция)
print(s)
print(value,' - ',s)
print('{1} - {0} '.format(value,s)) # аналогичный вывод (0 и 1 это номера переменных value и s)
print(f'{value} - {s} ') # еще один способ, интерполяция

m = False
print(m)

list = [1,2,'qwe', True, 1.23]
col = ['hello', 1,2,True,4.5]
print(list) # список и его вывод
print(col)
#пробел может поломать программу, если перед началом ввода строки его поставить
print('введите а')
a = int(input()) #ввод данных от пользователя
print('введите b')
b = int(input()) #указывать тип данных нужно,чтобы на выводе получать сумму в виде чисел, иначе это будет считаться строкой
print(a, '+', b, '=', a+b)

a = 1.3
b = 3
c = round(a/b, 5) #(вывод в вещественных числах), //(вывод в целых числах), **(возведение в степень)
#round позволяет сделать деление по математическим правилам, цифра после запятой указывает на сколько знаков после запятой мы будем выполнять деление(нули не пишутся)
print(c)

a = 3
a += 5
print(a)


a = 1<4 and 5>2
a = [1,2]
b = [1,2]
print (a == b)#будет Тrue тк равниваются элементы списка, аналогично с любыми другими типами данных

a = 1<3<5<10 #можно использовать несколько сравнение одновременно
print(a)

func = 1
T = 4
x = 123
print(func<T>x) # аналогично со строкой 42

f = 1>2 or 4<6
print f

f = [1,2,3,4]
print(f)
print(not 2 in f)# проверяет есть ли 2 в списке f (в данном случае True), c not наоборот выведет False

is_odd = f[0] % 2 == 0 # проверка остатка от деления на 2 1ого элемента списка
is_odd = not f[0] % 2 # будет тоже False, тк остаток равен 1, а в булевой переменне есть только 1 и 0, соответсвенно, если НЕ 1,то 0
print(is_odd) 

# ВАЖНО 0 = FALSE, 1 = TRUE

a = int(input('a = '))
b = int(input('b = '))
if a > b:
    print(a)
else:
    print(b)

for i in 1,2,3,4,5:
    print(i**2) # выведет все эти числа в квадрате


list = [1,2,3,4,5,8,20]
for i in list:
    print(i**2)

r = range(0,10,2) # 3ая цифра- аргмент приращения (тогда будут числа 1-3-5-7 итд)
for i in r: # можно сюда сразу записать range(10)
    print(i) # цифры от 0 до 9
# СО СТРОКАМИ МОЖНО ДЕЛАТЬ ТО ЖЕ САМОЕ
